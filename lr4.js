async function fetchData(url) {
  const res = await fetch(url);
  if (!res.ok) throw new Error(`HTTP ${res.status}`);
  return res.json();
}

function sortPostsByTitle(posts) {
  return [...posts].sort((a, b) => b.title.length - a.title.length);
}

function sortCommentsByEmail(comments) {
  return [...comments].sort((a, b) => a.email.localeCompare(b.email));
}

function filterUserFields(users) {
  return users.map(({ id, name, username, email, phone }) => ({
    id, name, username, email, phone
  }));
}

function getIncomplete(todos) {
  return todos.filter(todo => !todo.completed);
}

function fetchPostsWithCallback(callback) {
  fetch("https://jsonplaceholder.typicode.com/posts")
    .then(res => res.json())
    .then(data => callback(data))
    .catch(err => console.error("–û—à–∏–±–∫–∞ –ø–æ—Å—Ç–æ–≤ (callback):", err));
}

fetchPostsWithCallback(data => {
  const sorted = sortPostsByTitle(data);
  console.log("üìÑ Callback: –ü–æ—Å—Ç—ã –ø–æ –¥–ª–∏–Ω–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞:", sorted);
});

function fetchCommentsWithCallback(callback) {
  fetch("https://jsonplaceholder.typicode.com/comments")
    .then(res => res.json())
    .then(data => callback(data))
    .catch(err => console.error("–û—à–∏–±–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (callback):", err));
}

fetchCommentsWithCallback(data => {
  const sorted = sortCommentsByEmail(data);
  console.log("üí¨ Callback: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ email:", sorted);
});

function getUsersFiltered() {
  return new Promise((resolve, reject) => {
    fetch("https://jsonplaceholder.typicode.com/users")
      .then(res => {
        if (!res.ok) throw new Error(`HTTP ${res.status}`);
        return res.json();
      })
      .then(users => resolve(filterUserFields(users)))
      .catch(err => reject(err));
  });
}

getUsersFiltered()
  .then(data => console.log("üë• –ü—Ä–æ–º–∏—Å: –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:", data))
  .catch(err => console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", err));

function getTodosIncomplete() {
  return new Promise((resolve, reject) => {
    fetch("https://jsonplaceholder.typicode.com/todos")
      .then(res => {
        if (!res.ok) throw new Error(`HTTP ${res.status}`);
        return res.json();
      })
      .then(todos => {
        const filtered = getIncomplete(todos);
        console.log("üìã –ü—Ä–æ–º–∏—Å: –ù–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:", filtered);
        console.log(`üîé –í—Å–µ–≥–æ: ${filtered.length}`);
        resolve(filtered);
      })
      .catch(err => reject(err));
  });
}

getTodosIncomplete().catch(err => console.error("–û—à–∏–±–∫–∞ –∑–∞–¥–∞—á:", err));

async function displaySortedPostsAsync() {
  try {
    const posts = await fetchData("https://jsonplaceholder.typicode.com/posts");
    const sorted = sortPostsByTitle(posts);
    console.log("üìÑ Async: –ü–æ—Å—Ç—ã –ø–æ –¥–ª–∏–Ω–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞:", sorted);
    return sorted;
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ—Å—Ç–æ–≤ (async):", err);
  }
}

displaySortedPostsAsync();

async function displaySortedCommentsAsync() {
  try {
    const comments = await fetchData("https://jsonplaceholder.typicode.com/comments");
    const sorted = sortCommentsByEmail(comments);
    console.log("üí¨ Async: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ email:", sorted);
    return sorted;
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (async):", err);
  }
}

displaySortedCommentsAsync();
